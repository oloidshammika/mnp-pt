<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Threads" elementType="Argument">
            <stringProp name="Argument.name">Threads</stringProp>
            <stringProp name="Argument.value">${__P(Threads,25)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RampTime" elementType="Argument">
            <stringProp name="Argument.name">RampTime</stringProp>
            <stringProp name="Argument.value">${__P(RampTime,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">${__P(Duration,3600)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BaseURL1" elementType="Argument">
            <stringProp name="Argument.name">BaseURL1</stringProp>
            <stringProp name="Argument.value">${__P(BaseURL,k8s-mnp-mnpenumm-b76fd115af-9bc0593a88c50504.elb.eu-west-1.amazonaws.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ported" elementType="Argument">
            <stringProp name="Argument.name">Ported</stringProp>
            <stringProp name="Argument.value">${__P(Ported,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TargetThroughput" elementType="Argument">
            <stringProp name="Argument.name">TargetThroughput</stringProp>
            <stringProp name="Argument.value">${__P(TargetThroughput,6000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BaseURL" elementType="Argument">
            <stringProp name="Argument.name">BaseURL</stringProp>
            <stringProp name="Argument.value">${__P(BaseURL,k8s-mnp-mnpenumm-0082d048ea-e86988155af489cb.elb.ap-southeast-1.amazonaws.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RampTime}</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="jp@gc - UDP Request - ported number (In cached)" enabled="true">
          <stringProp name="hostname">k8s-mnp-mnpenumm-0082d048ea-e86988155af489cb.elb.ap-southeast-1.amazonaws.com</stringProp>
          <stringProp name="port">9001</stringProp>
          <boolProp name="waitresponse">true</boolProp>
          <boolProp name="closechannel">false</boolProp>
          <stringProp name="timeout">5000</stringProp>
          <stringProp name="data">${msisdnReversed}.${password}.${username}.hgc-intl.com. NAPTR IN</stringProp>
          <stringProp name="encodeclass">kg.apc.jmeter.samplers.DNSJavaDecoderToRawData</stringProp>
          <stringProp name="bind_address"></stringProp>
          <stringProp name="bind_port"></stringProp>
        </kg.apc.jmeter.samplers.UDPSampler>
        <hashTree>
          <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
            <collectionProp name="DNSCacheManager.servers"/>
            <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
            <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
          </DNSCacheManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">data/prod_data.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">msisdn,username,password,hostname</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Retrieve the msisdn value from the CSV data
String originalMsisdn = vars.get(&quot;msisdn&quot;);

// Reverse the msisdn
String reversedMsisdn = new StringBuilder(originalMsisdn).reverse().toString();

// Insert dots between digits
String reversedWithDots = reversedMsisdn.replaceAll(&quot;(\\d)(?=\\d)&quot;, &quot;$1.&quot;);

// Remove trailing dot
String msisdnWithoutTrailingDot = reversedWithDots.replaceAll(&quot;\\.$&quot;, &quot;&quot;);

// Remove trailing double quote
String msisdnWithoutTrailingQuote = msisdnWithoutTrailingDot.replaceAll(&quot;\&quot;$&quot;, &quot;&quot;);

// Store the reversed, dotted, and without trailing dot msisdn in the &quot;msisdn1&quot; variable
vars.put(&quot;msisdnReversed&quot;, msisdnWithoutTrailingQuote);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1270300065">!msisdn:</stringProp>
              <stringProp name="283068037">ANSWERS:</stringProp>
              <stringProp name="1318691589">status=0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Retrieve the msisdn value from the CSV data
String originalMsisdn = vars.get(&quot;msisdn&quot;);

// Reverse the msisdn
String reversedMsisdn = new StringBuilder(originalMsisdn).reverse().toString();

// Insert dots between digits
StringBuilder reversedWithDots = new StringBuilder(reversedMsisdn);
for (int i = 1; i &lt; reversedWithDots.length(); i += 2) {
    reversedWithDots.insert(i, &apos;.&apos;);
}

// Store the reversed and dotted msisdn in the &quot;msisdn&quot; variable
vars.put(&quot;msisdn1&quot;, reversedWithDots.toString());
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <stringProp name="throughput">${TargetThroughput}</stringProp>
            <intProp name="calcMode">1</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="jp@gc - UDP Request- Number ranges" enabled="true">
          <stringProp name="hostname">k8s-mnp-mnpenumm-0082d048ea-e86988155af489cb.elb.ap-southeast-1.amazonaws.com</stringProp>
          <stringProp name="port">9001</stringProp>
          <boolProp name="waitresponse">true</boolProp>
          <boolProp name="closechannel">false</boolProp>
          <stringProp name="timeout">5000</stringProp>
          <stringProp name="data">${msisdnRegex}.${password}.${username}.hgc-intl.com. NAPTR IN</stringProp>
          <stringProp name="encodeclass">kg.apc.jmeter.samplers.DNSJavaDecoderToRawData</stringProp>
          <stringProp name="bind_address"></stringProp>
          <stringProp name="bind_port"></stringProp>
        </kg.apc.jmeter.samplers.UDPSampler>
        <hashTree>
          <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
            <collectionProp name="DNSCacheManager.servers"/>
            <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
            <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
          </DNSCacheManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">data/prod_data.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">msisdn,username,password,hostname</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.Random;

// Define the regular expressions for MSISDN along with corresponding MCC, MNC, and market names
String[] regexArray = {
    &quot;^(923){1}(0){1}\\d{8}$;452;01;Ufone&quot;,
    &quot;^(923){1}(3){1}\\d{8}$;452;03;Paktel (CMPak)&quot;,
    &quot;^(923){1}(1|7){1}\\d{8}$;452;04;Telenor&quot;,
    &quot;^(923){1}(4){1}\\d{8}$;452;06;Warid (Jazz)&quot;,
    &quot;^(923){1}(2){1}\\d{8}$;452;07;Instaphone&quot;,
    &quot;^(923){1}(64){1}\\d{7}$;452;08;Unknown&quot;
};

// Select a random regular expression
Random random = new Random();
int index = random.nextInt(regexArray.length);
String selectedEntry = regexArray[index];

// Split the selected entry to get regex, MCC, MNC, and market name
String[] entryParts = selectedEntry.split(&quot;;&quot;);
String randomRegex = entryParts[0];
String mcc = entryParts[1];
String mnc = entryParts[2];
String marketName = entryParts[3];

// Generate MSISDN based on the selected regular expression
StringBuilder msisdnBuilder = new StringBuilder(&quot;923&quot;);

// Ensure that the 2nd digit is not 5, 6, 8, or 9
msisdnBuilder.append(random.nextInt(2) + 1);

// Ensure that the 3rd digit is not 5, 6, 8, or 9
int thirdDigit;
do {
    thirdDigit = random.nextInt(10);
} while (thirdDigit == 5 || thirdDigit == 6 || thirdDigit == 8 || thirdDigit == 9);
msisdnBuilder.append(thirdDigit);

// Ensure that the 4th digit is not 5, 6, 8, or 9
int fourthDigit;
do {
    fourthDigit = random.nextInt(10);
} while (fourthDigit == 5 || fourthDigit == 6 || fourthDigit == 8 || fourthDigit == 9);
msisdnBuilder.append(fourthDigit);

// Generate the rest of the digits
for (int i = 0; i &lt; 8; i++) {
    msisdnBuilder.append(random.nextInt(10));
}

// Trim the last two digits to ensure the MSISDN length is 12
String generatedMsisdn = msisdnBuilder.toString().substring(0, 12);

// Output the selected entry and generated MSISDN
log.info(&quot;Selected Entry: &quot; + selectedEntry);
log.info(&quot;Generated MSISDN: &quot; + generatedMsisdn);

// Set the generated MSISDN, MCC, MNC, and market name to JMeter variables for later use
vars.put(&quot;generatedMsisdn&quot;, generatedMsisdn);
vars.put(&quot;generatedMcc&quot;, mcc);
vars.put(&quot;generatedMnc&quot;, mnc);
vars.put(&quot;generatedMarketName&quot;, marketName);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.Random;

// Define the regular expressions for MSISDN along with corresponding MCC, MNC, and market names
String[] regexArray = {
    &quot;^(923){1}(0){1}\\d{8}$;452;01;Ufone&quot;,
    &quot;^(923){1}(3){1}\\d{8}$;452;03;Paktel (CMPak)&quot;,
    &quot;^(923){1}(1|7){1}\\d{8}$;452;04;Telenor&quot;,
    &quot;^(923){1}(4){1}\\d{8}$;452;06;Warid (Jazz)&quot;,
    &quot;^(923){1}(2){1}\\d{8}$;452;07;Instaphone&quot;,
    &quot;^(923){1}(64){1}\\d{7}$;452;08;Unknown&quot;
};

// Select a random regular expression
Random random = new Random();
int index = random.nextInt(regexArray.length);
String selectedEntry = regexArray[index];

// Split the selected entry to get regex, MCC, MNC, and market name
String[] entryParts = selectedEntry.split(&quot;;&quot;);
String randomRegex = entryParts[0];
String mcc = entryParts[1];
String mnc = entryParts[2];
String marketName = entryParts[3];

// Generate MSISDN based on the selected regular expression
StringBuilder msisdnBuilder = new StringBuilder(&quot;923&quot;);
for (int i = 0; i &lt; 2; i++) {
    msisdnBuilder.append(random.nextInt(10));
}

// Ensure that the 3rd digit is not 5, 6, or 8
int thirdDigit = random.nextInt(10);
while (thirdDigit == 5 || thirdDigit == 6 || thirdDigit == 8) {
    thirdDigit = random.nextInt(10);
}
msisdnBuilder.append(thirdDigit);

// Ensure that the 4th digit is not 9
int fourthDigit = random.nextInt(10);
while (fourthDigit == 9) {
    fourthDigit = random.nextInt(10);
}
msisdnBuilder.append(fourthDigit);

for (int i = 4; i &lt; 9; i++) {
    msisdnBuilder.append(random.nextInt(10));
}
String generatedMsisdn = msisdnBuilder.toString();

// Output the selected entry and generated MSISDN
log.info(&quot;Selected Entry: &quot; + selectedEntry);
log.info(&quot;Generated MSISDN: &quot; + generatedMsisdn);

// Set the generated MSISDN, MCC, MNC, and market name to JMeter variables for later use
vars.put(&quot;generatedMsisdn&quot;, generatedMsisdn);
vars.put(&quot;generatedMcc&quot;, mcc);
vars.put(&quot;generatedMnc&quot;, mnc);
vars.put(&quot;generatedMarketName&quot;, marketName);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Retrieve the msisdn value from the CSV data
String originalMsisdn = vars.get(&quot;generatedMsisdn&quot;);

// Reverse the msisdn
String reversedMsisdn = new StringBuilder(originalMsisdn).reverse().toString();

// Insert dots between digits
String reversedWithDots = reversedMsisdn.replaceAll(&quot;(\\d)(?=\\d)&quot;, &quot;$1.&quot;);

// Remove trailing dot
String msisdnWithoutTrailingDot = reversedWithDots.replaceAll(&quot;\\.$&quot;, &quot;&quot;);

// Remove trailing double quote
String msisdnWithoutTrailingQuote = msisdnWithoutTrailingDot.replaceAll(&quot;\&quot;$&quot;, &quot;&quot;);

// Store the reversed, dotted, and without trailing dot msisdn in the &quot;msisdn1&quot; variable
vars.put(&quot;msisdnRegex&quot;, msisdnWithoutTrailingQuote);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1270300065">!msisdn:</stringProp>
              <stringProp name="283068037">ANSWERS:</stringProp>
              <stringProp name="1318691589">status=0</stringProp>
              <stringProp name="3345488">mcc=</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <stringProp name="throughput">${TargetThroughput}</stringProp>
            <intProp name="calcMode">1</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener_Main" enabled="false">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://35.178.232.23:8086/write?db=grafanadb&amp;u=qauser&amp;p=hgc123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">HGC_REST_CALLS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">99;95;90</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">HGC_REST_CALLS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">hgc123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">qauser</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
